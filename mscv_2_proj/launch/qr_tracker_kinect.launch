<!-- -*- xml -*-

     This tutorial relies on a live video sequence acquired with an 
     usb camera in front of a QR code planar target. The model 
     corresponding to this target is given into the models directory 
     of this package.

     Camera parameters are set as rosparam parameters. They need to be changed
     to be the one of your camera.

     See http://www.ros.org/wiki/visp_auto_tracker for more information.

  -->
<launch>	
  <!-- Launch the tracking node -->
  <node pkg="visp_auto_tracker" type="visp_auto_tracker" name="visp_auto_tracker" output="screen">
    <param name="model_path" value="$(find visp_auto_tracker)/models" />
    <param name="model_name" value="pattern" />
    <param name="debug_display" value="True" />
	      
    <remap from="/visp_auto_tracker/camera_info" to="/camera/rgb/camera_info"/>
    <remap from="/visp_auto_tracker/image_raw" to="/camera/rgb/image_mono"/>
  </node>

  <!-- Launch the kinect camera acquisition node -->
  <node pkg="camera" type="kinect_cam_node" name="camera_nodelet_manager" output="screen">      
    <param name="image_width" value="640" />
    <param name="image_height" value="480" />
    <!--param name="video_device" value="/dev/video0" /-->      
    <param name="pixel_format" value="yuyv" />
    <!-- rename the camera name topic into /camera/image_raw to match the one in visp_auto_tracker/models/calibration.ini file --> 
    <param name="camera_name" value="/camera/driver/rgb_frame_id" />
    <param name="camera_info_url" value="/camera/driver/rgb_camera_info_url" type="string" />
  </node>

  <node pkg = "image_view" name = "image_saver" type="image_saver.cpp" >
    <param name="image"  value = " image:=/camera/rgb/image_mono"/>
  </node>

</launch>
